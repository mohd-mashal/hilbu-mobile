workflows:
  hilbu_release:
    name: HILBU • Android AAB + iOS TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      groups:
        - hilbu_android
        - hilbu_apple
      vars:
        EXPO_NO_TELEMETRY: "1"
        NODE_OPTIONS: "--max_old_space_size=4096"

    cache:
      cache_paths:
        - ~/.npm
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods

    scripts:
      - name: Use Java 17
        script: |
          echo 'export JAVA_HOME=$(/usr/libexec/java_home -v 17)' >> $CM_ENV
          java -version

      - name: Install Node deps
        script: npm ci

      - name: Ensure Expo CLI
        script: npx --yes expo --version

      - name: Resolve bundle identifiers from Expo config
        script: |
          INFO=$(npx expo config --json)
          IOS_BUNDLE_ID=$(echo "$INFO" | python3 -c "import sys,json; d=json.load(sys.stdin); print((d.get('ios') or {}).get('bundleIdentifier',''))")
          ANDROID_APP_ID=$(echo "$INFO" | python3 -c "import sys,json; d=json.load(sys.stdin); print((d.get('android') or {}).get('package',''))")
          if [ -z "$IOS_BUNDLE_ID" ] || [ -z "$ANDROID_APP_ID" ]; then
            echo "Failed to resolve bundle identifiers from Expo config"; exit 1
          fi
          echo "IOS_BUNDLE_ID=$IOS_BUNDLE_ID" >> $CM_ENV
          echo "ANDROID_APP_ID=$ANDROID_APP_ID" >> $CM_ENV

      - name: Prebuild native projects if any folder is missing (generate both)
        script: |
          NEED_ANDROID=0; [ -d "android" ] || NEED_ANDROID=1
          NEED_IOS=0; [ -d "ios" ] || NEED_IOS=1
          if [ $NEED_ANDROID -eq 1 ] || [ $NEED_IOS -eq 1 ]; then
            echo "Running expo prebuild for ios,android (one shot)"
            npx expo prebuild --non-interactive --platform ios,android
          else
            echo "Native projects already present, skipping expo prebuild."
          fi
          echo "Folders after prebuild:"
          ls -la | sed -n '1,200p'
          [ -d ios ] && echo "✅ ios/ exists" || { echo "❌ ios/ still missing"; exit 1; }

      - name: 🔢 Automatic Version Bumping (Android versionCode & iOS buildNumber)
        script: |
          BN="${BUILD_NUMBER:-0}"
          if [ "$BN" = "0" ] || ! echo "$BN" | grep -Eq '^[0-9]+$'; then
            BN=$(date +%s | tail -c 7)
          fi
          echo "Using build number: $BN"

          # Android versionCode
          if [ -f android/app/build.gradle ]; then
            sed -i '' -E "s/(versionCode\s+)[0-9]+/\1${BN}/" android/app/build.gradle
          elif [ -f android/app/build.gradle.kts ]; then
            sed -i '' -E "s/(versionCode\s*\()\s*[0-9]+(\))/\1${BN}\2/" android/app/build.gradle.kts
          fi

          # iOS CFBundleVersion
          for P in $(find ios -name "Info.plist"); do
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BN" "$P" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $BN" "$P"
          done

      - name: Install CocoaPods
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: ✅ Quick env names (sanity check)
        script: |
          echo "Expecting ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD"
          env | cut -d= -f1 | grep -E '^ANDROID_' || echo "(no ANDROID_* envs)"

      - name: Android | Decode keystore (supports Base64 OR file-var)
        script: |
          set -e
          mkdir -p android
          OUT="android/hilbu-upload.keystore"
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > "$OUT" || { echo "Base64 decode failed"; exit 1; }
          elif [ -n "${ANDROID_KEYSTORE:-}" ] && [ -f "$ANDROID_KEYSTORE" ]; then
            cp "$ANDROID_KEYSTORE" "$OUT"
          else
            echo "ERROR: Neither ANDROID_KEYSTORE_BASE64 nor ANDROID_KEYSTORE (file var) is available."; exit 1
          fi
          [ -s "$OUT" ] || { echo "ERROR: Keystore file is empty"; exit 1; }
          ls -lh "$OUT"

      - name: Android | Build signed AAB (bundleRelease)
        script: |
          cd android
          ./gradlew clean bundleRelease \
            -Pandroid.injected.signing.store.file="$CM_BUILD_DIR/android/hilbu-upload.keystore" \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            --no-daemon --stacktrace
          cd ..

      - name: iOS | Fetch signing files and set profiles
        script: |
          app-store-connect fetch-signing-files \
            --issuer-id "$APPLE_API_ISSUER_ID" \
            --key-id "$APPLE_API_KEY_ID" \
            --private-key "$APP_STORE_PRIVATE_KEY" \
            --type IOS_APP_STORE \
            "$IOS_BUNDLE_ID" \
            --create
          keychain initialize
          keychain add-certificates
          xcode-project use-profiles

      - name: iOS | Build IPA
        script: |
          SCHEME=$(xcodebuild -list -json -workspace ios/*.xcworkspace | python3 -c "import sys,json; d=json.load(sys.stdin); print((d.get('workspace') or {}).get('schemes',[None])[0] or '')")
          if [ -z "$SCHEME" ]; then
            echo "Could not determine Xcode scheme"; exit 1
          fi
          xcode-project build-ipa --workspace ios/*.xcworkspace --scheme "$SCHEME"

    artifacts:
      - android/app/build/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa

    publishing:
      app_store_connect:
        api_key: $APP_STORE_PRIVATE_KEY
        key_id: $APPLE_API_KEY_ID
        issuer_id: $APPLE_API_ISSUER_ID
        submit_to_testflight: true
