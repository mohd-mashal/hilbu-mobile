workflows:
  hilbu_expo_release:
    name: HILBU | Expo RN (Android AAB + iOS IPA to TestFlight)
    max_build_duration: 120
    environment:
      vars:
        # ---- Expo/Node ----
        NODE_OPTIONS: --max-old-space-size=4096
        CI: "1"

        # ---- Google Maps (injected for native builds) ----
        ANDROID_GOOGLE_MAPS_API_KEY: $ANDROID_GOOGLE_MAPS_API_KEY
        IOS_GOOGLE_MAPS_API_KEY: $IOS_GOOGLE_MAPS_API_KEY

        # ---- Expo public config needed at build-time ----
        EXPO_PUBLIC_TAP_MODE: $EXPO_PUBLIC_TAP_MODE

        # ---- Android signing (ENV-only; no android_signing block) ----
        ANDROID_KEYSTORE_BASE64: $ANDROID_KEYSTORE_BASE64
        ANDROID_KEYSTORE_PASSWORD: $ANDROID_KEYSTORE_PASSWORD
        ANDROID_KEY_ALIAS: $ANDROID_KEY_ALIAS
        ANDROID_KEY_PASSWORD: $ANDROID_KEY_PASSWORD

        # ---- Apple API key (App Store Connect) ----
        APP_STORE_PRIVATE_KEY: $APP_STORE_PRIVATE_KEY
        APPLE_API_KEY_ID: $APPLE_API_KEY_ID
        APPLE_API_ISSUER_ID: $APPLE_API_ISSUER_ID

      xcode: 16.4
      cocoapods: default
      node: 20.12.2
      npm: default
      java: 17
      groups:
        - hilbu-secure

    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: "*"
          include: true
          source: true

    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
        - $CM_BUILD_DIR/android/.gradle
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Developer/Xcode/DerivedData

    scripts:
      # 1) Checkout is implicit on Git builds

      # 2) Node modules
      - name: üì¶ Install dependencies
        script: |
          npm ci

      # 3) Quick sanity of env var NAMES (no values)
      - name: ‚úÖ Env names present (sanity only)
        script: |
          echo "---- ANDROID_* present ----"
          (env | grep -E '^ANDROID_' | cut -d= -f1) || true
          echo "---- APPLE_* / APP_* present ----"
          (env | grep -E '^(APPLE_|APP_)' | cut -d= -f1) || true
          echo "---- EXPO_* present ----"
          (env | grep -E '^EXPO_' | cut -d= -f1) || true

      # 4) Generate native projects if missing. If Expo prebuild doesn't produce ios/, retry with template.
      - name: üèóÔ∏è Prebuild native projects if missing (ios and/or android)
        script: |
          set -e
          NEED_ANDROID=0; [ -d "android" ] || NEED_ANDROID=1
          NEED_IOS=0; [ -d "ios" ] || NEED_IOS=1

          if [ $NEED_ANDROID -eq 1 ] || [ $NEED_IOS -eq 1 ]; then
            echo "Running expo prebuild for ios,android (1st attempt)"
            npx expo prebuild --platform ios,android --no-install || true
          fi

          if [ ! -d ios ] || [ ! -d android ]; then
            echo "Retry prebuild with explicit Expo bare template (workaround)"
            npx expo prebuild --platform ios,android --no-install --template expo-template-bare-minimum || true
          fi

          echo "Folders after prebuild:"
          ls -la | sed -n '1,200p'

          [ -d ios ] || { echo "‚ùå ios/ still missing after both attempts"; exit 1; }
          [ -d android ] || { echo "‚ùå android/ still missing after both attempts"; exit 1; }
          echo "‚úÖ ios/ and android/ exist"

      # 5) iOS pods (only if ios/ exists)
      - name: üçé Install CocoaPods
        script: |
          set -e
          cd ios
          pod repo update
          pod install
          cd ..

      # 6) Android | Decode keystore from ENV (Base64 OR file-var)
      - name: ü§ñ Android | Decode keystore (supports Base64 OR file-var)
        script: |
          set -e
          mkdir -p android
          OUT="android/hilbu-upload.keystore"

          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "Decoding ANDROID_KEYSTORE_BASE64 -> $OUT"
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > "$OUT" || { echo "Base64 decode failed"; exit 1; }
          elif [ -n "${ANDROID_KEYSTORE:-}" ] && [ -f "$ANDROID_KEYSTORE" ]; then
            echo "Copying ANDROID_KEYSTORE file-var -> $OUT"
            cp "$ANDROID_KEYSTORE" "$OUT"
          else
            echo "ERROR: Neither ANDROID_KEYSTORE_BASE64 nor ANDROID_KEYSTORE (file var) is available."
            exit 1
          fi

          [ -s "$OUT" ] || { echo "ERROR: Keystore file is empty at $OUT"; exit 1; }
          ls -lh "$OUT"

      # 7) Android | Gradle wrapper & Maps key
      - name: ü§ñ Android | Prepare Gradle & inject Maps API key
        script: |
          set -e
          cd android
          chmod +x ./gradlew
          # Inject Google Maps API key if app uses it via manifest placeholder:
          if grep -q "com.google.android.geo.API_KEY" app/src/main/AndroidManifest.xml 2>/dev/null; then
            echo "Manifest contains Google Maps key placeholder; Gradle will pick from env."
          fi
          cd ..

      # 8) Android | Build signed AAB (bundleRelease)
      - name: ü§ñ Android | Build signed AAB (bundleRelease)
        script: |
          set -e
          cd android
          ./gradlew \
            -Pandroid.injected.signing.store.file="$CM_BUILD_DIR/android/hilbu-upload.keystore" \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            -PANDROID_GOOGLE_MAPS_API_KEY="$ANDROID_GOOGLE_MAPS_API_KEY" \
            bundleRelease
          cd ..
          echo "AAB path(s):"
          find android/app/build/outputs/bundle -name "*.aab" -maxdepth 3 -type f

      # 9) iOS | Create API key file for App Store Connect
      - name: üçé iOS | Write App Store Connect API key
        script: |
          set -e
          mkdir -p $HOME/.appstoreconnect
          KEY_FILE="$HOME/.appstoreconnect/private_key.p8"
          echo "$APP_STORE_PRIVATE_KEY" > "$KEY_FILE"
          echo "Wrote API key to $KEY_FILE (hidden)"

      # 10) iOS | Resolve workspace & pick app scheme (skip Pods/tests/boost)
      - name: üçé iOS | Build IPA (robust workspace & scheme pick, Release)
        script: |
          set -e
          set -o pipefail
          WS=$(find ios -maxdepth 1 -type d -name "*.xcworkspace" | head -n1)
          if [ -z "$WS" ]; then
            echo "No .xcworkspace found, listing ios/:"; ls -la ios; exit 1
          fi
          echo "Workspace: $WS"

          SCHEMES=$(xcodebuild -list -json -workspace "$WS" | python3 -c 'import sys,json; d=json.load(sys.stdin); print("\n".join((d.get("workspace") or {}).get("schemes",[])))' || true)
          [ -n "$SCHEMES" ] && { echo "Found schemes:"; echo "$SCHEMES"; }
          PICK=""
          for S in $SCHEMES; do
            case "$S" in
              Pods-*|*Tests|*UITests|boost) continue ;;
            esac
            echo "Testing scheme: $S"
            if xcodebuild -showBuildSettings -workspace "$WS" -scheme "$S" | grep -q "WRAPPER_EXTENSION = app"; then
              PICK="$S"; break
            fi
          done
          [ -n "$PICK" ] || { echo "Could not find an app scheme among: $SCHEMES"; exit 1; }
          echo "Using app scheme: $PICK"

          # Build and export IPA with Codemagic CLI (Release by default)
          xcode-project build-ipa \
            --workspace "$WS" \
            --scheme "$PICK" \
            --verbose

      # 11) iOS | Upload to TestFlight using API key
      - name: üöÄ iOS | Upload IPA to TestFlight
        script: |
          set -e
          IPA_PATH=$(find $CM_BUILD_DIR -name "*.ipa" -maxdepth 4 -type f | head -n1)
          [ -n "$IPA_PATH" ] || { echo "No IPA found to upload"; exit 1; }

          app-store-connect publish \
            --apiKeyId "$APPLE_API_KEY_ID" \
            --issuerId "$APPLE_API_ISSUER_ID" \
            --privateKey "$APP_STORE_PRIVATE_KEY" \
            --ipa "$IPA_PATH" \
            --verbose

    artifacts:
      - android/app/build/outputs/**/*.aab
      - $CM_BUILD_DIR/**/*.ipa
      - $CM_BUILD_DIR/**/mapping.txt
      - $CM_BUILD_DIR/**/outputs/logs/*.log

    publishing:
      email:
        recipients:
          - your@email.com
        notify:
          success: true
          failure: true
