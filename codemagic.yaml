workflows:
  hilbu_release:
    name: HILBU • Android AAB + iOS TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      groups:
        - hilbu_android         # holds: ANDROID_KEYSTORE_BASE64 / PASSWORD / ANDROID_KEY_ALIAS / ANDROID_KEY_PASSWORD
        - hilbu_apple           # holds: APP_STORE_PRIVATE_KEY / APPLE_API_KEY_ID / APPLE_API_ISSUER_ID
      vars:
        EXPO_NO_TELEMETRY: "1"
        NODE_OPTIONS: "--max_old_space_size=4096"
        CI: "1"                 # make expo non-interactive
        EXPO_PUBLIC_TAP_MODE: "sandbox"
        ANDROID_GOOGLE_MAPS_API_KEY: $ANDROID_GOOGLE_MAPS_API_KEY
        IOS_GOOGLE_MAPS_API_KEY: $IOS_GOOGLE_MAPS_API_KEY

    cache:
      cache_paths:
        - ~/.npm
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods

    scripts:
      - name: Use Java 17
        script: |
          echo 'export JAVA_HOME=$(/usr/libexec/java_home -v 17)' >> $CM_ENV
          java -version

      - name: Install Node deps
        script: npm ci

      - name: Ensure Expo CLI
        script: npx --yes expo --version

      - name: Prebuild native projects (create ios/ & android/ if missing)
        script: |
          set -e
          if [ ! -d ios ] || [ ! -d android ]; then
            npx expo prebuild --platform ios,android || true
          fi
          # Fallbacks if one still missing
          [ -d ios ]     || npx expo run:ios --no-install || true
          [ -d android ] || npx expo run:android --no-install || true
          [ -d ios ] && [ -d android ] || { echo "❌ Native folders missing after prebuild"; exit 1; }
          echo "✅ ios/ and android/ exist"

      - name: 🔢 Bump build numbers (Android versionCode & iOS CFBundleVersion)
        script: |
          BN="${BUILD_NUMBER:-0}"
          if ! echo "$BN" | grep -Eq '^[0-9]+$' || [ "$BN" = "0" ]; then BN=$(date +%s | tail -c 7); fi
          echo "Using build number: $BN"

          # Android: versionCode (Gradle or KTS)
          if [ -f android/app/build.gradle ]; then
            sed -i '' -E "s/(versionCode\s+)[0-9]+/\1${BN}/" android/app/build.gradle || true
          fi
          if [ -f android/app/build.gradle.kts ]; then
            sed -i '' -E "s/(versionCode\s*\()\s*[0-9]+(\))/\1${BN}\2/" android/app/build.gradle.kts || true
          fi

          # iOS: CFBundleVersion in all Info.plist files
          for P in $(find ios -name "Info.plist"); do
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BN" "$P" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $BN" "$P"
          done

      - name: Install CocoaPods
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Resolve bundle identifiers from native (fallback to Expo if needed)
        script: |
          set -e
          IOS_PLIST=$(find ios -maxdepth 2 -name "Info.plist" | head -n1 || true)
          IOS_BUNDLE_ID=""
          if [ -n "$IOS_PLIST" ]; then
            IOS_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$IOS_PLIST" 2>/dev/null || true)
          fi
          ANDROID_APP_ID=""
          if [ -f android/app/src/main/AndroidManifest.xml ]; then
            ANDROID_APP_ID=$(grep -o 'package="[^"]*"' android/app/src/main/AndroidManifest.xml | head -n1 | cut -d\" -f2)
          fi
          if [ -z "$IOS_BUNDLE_ID" ] || [ -z "$ANDROID_APP_ID" ]; then
            INFO=$(npx expo config --json)
            [ -z "$IOS_BUNDLE_ID" ] && IOS_BUNDLE_ID=$(echo "$INFO" | python3 -c 'import sys,json; d=json.load(sys.stdin); print((d.get("ios") or {}).get("bundleIdentifier",""))')
            [ -z "$ANDROID_APP_ID" ] && ANDROID_APP_ID=$(echo "$INFO" | python3 -c 'import sys,json; d=json.load(sys.stdin); print((d.get("android") or {}).get("package",""))')
          fi
          [ -n "$IOS_BUNDLE_ID" ] || { echo "Could not resolve iOS bundle id"; exit 1; }
          [ -n "$ANDROID_APP_ID" ] || { echo "Could not resolve Android app id"; exit 1; }
          echo "IOS_BUNDLE_ID=$IOS_BUNDLE_ID" >> $CM_ENV
          echo "ANDROID_APP_ID=$ANDROID_APP_ID" >> $CM_ENV
          echo "Resolved iOS: $IOS_BUNDLE_ID"
          echo "Resolved Android: $ANDROID_APP_ID"

      - name: ✅ Quick env names (sanity check)
        script: |
          echo "---- ANDROID_* present ----"; env | cut -d= -f1 | grep -E '^ANDROID_' || echo "(none)"
          echo "---- APP_*/APPLE_* present ----"; env | cut -d= -f1 | grep -E '^(APP_|APPLE_)' || echo "(none)"

      - name: Android | Decode keystore (supports Base64 OR file-var)
        script: |
          set -e
          mkdir -p android
          OUT="android/hilbu-upload.keystore"
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "Decoding ANDROID_KEYSTORE_BASE64 -> $OUT"
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > "$OUT" || { echo "Base64 decode failed"; exit 1; }
          elif [ -n "${ANDROID_KEYSTORE:-}" ] && [ -f "$ANDROID_KEYSTORE" ]; then
            echo "Copying ANDROID_KEYSTORE file-var -> $OUT"
            cp "$ANDROID_KEYSTORE" "$OUT"
          else
            echo "ERROR: Neither ANDROID_KEYSTORE_BASE64 nor ANDROID_KEYSTORE (file var) is available."; exit 1
          fi
          [ -s "$OUT" ] || { echo "ERROR: Keystore file is empty"; exit 1; }
          ls -lh "$OUT"

      - name: Android | Build signed AAB (bundleRelease)
        script: |
          cd android
          ./gradlew clean bundleRelease \
            -Pandroid.injected.signing.store.file="$CM_BUILD_DIR/android/hilbu-upload.keystore" \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            --no-daemon --stacktrace
          cd ..

      - name: iOS | Fetch signing files and set profiles
        script: |
          app-store-connect fetch-signing-files \
            --issuer-id "$APPLE_API_ISSUER_ID" \
            --key-id "$APPLE_API_KEY_ID" \
            --private-key "$APP_STORE_PRIVATE_KEY" \
            --type IOS_APP_STORE "$IOS_BUNDLE_ID" --create
          keychain initialize
          keychain add-certificates
          xcode-project use-profiles

      - name: iOS | Build IPA (robust workspace & scheme pick, Release)
        script: |
          set -e
          set -o pipefail
          # Real .xcworkspace (directory), not internal XML file
          WS=$(find ios -maxdepth 1 -type d -name "*.xcworkspace" | head -n1)
          if [ -z "$WS" ]; then
            echo "No .xcworkspace found, listing ios/:"; ls -la ios; exit 1
          fi
          echo "Workspace: $WS"

          # List schemes and pick the first app scheme (skip Pods/Tests/boost)
          SCHEMES=$(xcodebuild -list -json -workspace "$WS" | python3 -c 'import sys,json; d=json.load(sys.stdin); print("\n".join((d.get("workspace") or {}).get("schemes",[])))' || true)
          [ -n "$SCHEMES" ] && { echo "Found schemes:"; echo "$SCHEMES"; }
          PICK=""
          for S in $SCHEMES; do
            case "$S" in
              Pods-*|*Tests|*UITests|boost) continue ;;
            esac
            echo "Testing scheme: $S"
            if xcodebuild -showBuildSettings -workspace "$WS" -scheme "$S" | grep -q "WRAPPER_EXTENSION = app"; then
              PICK="$S"; break
            fi
          done
          [ -n "$PICK" ] || { echo "Could not find an app scheme among: $SCHEMES"; exit 1; }
          echo "Using app scheme: $PICK"

          # Build IPA with Release configuration (no extra archive/export flags needed)
          xcode-project build-ipa --workspace "$WS" --scheme "$PICK" --configuration Release --verbose

    artifacts:
      - android/app/build/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa

    publishing:
      app_store_connect:
        api_key: $APP_STORE_PRIVATE_KEY
        key_id: $APPLE_API_KEY_ID
        issuer_id: $APPLE_API_ISSUER_ID
        submit_to_testflight: true
